/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.7
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12 "/opt/workspace/build/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipQList0101qt_gui_cppPluginDescriptor.cpp"

#line 7 "plugin_descriptor.sip"
#include <qt_gui_cpp/plugin_descriptor.h>
#line 16 "/opt/workspace/build/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipQList0101qt_gui_cppPluginDescriptor.cpp"


extern "C" {static void assign_QList_0101qt_gui_cpp_PluginDescriptor(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101qt_gui_cpp_PluginDescriptor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::qt_gui_cpp::PluginDescriptor*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::qt_gui_cpp::PluginDescriptor*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101qt_gui_cpp_PluginDescriptor(SIP_SSIZE_T);}
static void *array_QList_0101qt_gui_cpp_PluginDescriptor(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::qt_gui_cpp::PluginDescriptor*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101qt_gui_cpp_PluginDescriptor(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101qt_gui_cpp_PluginDescriptor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::qt_gui_cpp::PluginDescriptor*>(reinterpret_cast<const QList< ::qt_gui_cpp::PluginDescriptor*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101qt_gui_cpp_PluginDescriptor(void *, int);}
static void release_QList_0101qt_gui_cpp_PluginDescriptor(void *ptr, int)
{
    delete reinterpret_cast<QList< ::qt_gui_cpp::PluginDescriptor*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101qt_gui_cpp_PluginDescriptor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101qt_gui_cpp_PluginDescriptor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::qt_gui_cpp::PluginDescriptor*> **sipCppPtr = reinterpret_cast<QList< ::qt_gui_cpp::PluginDescriptor*> **>(sipCppPtrV);

#line 184 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<qt_gui_cpp::PluginDescriptor *> *ql = new QList<qt_gui_cpp::PluginDescriptor *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        qt_gui_cpp::PluginDescriptor *t = reinterpret_cast<qt_gui_cpp::PluginDescriptor *>(
                sipForceConvertToType(itm, sipType_qt_gui_cpp_PluginDescriptor, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'qt_gui_cpp::PluginDescriptor' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 124 "/opt/workspace/build/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipQList0101qt_gui_cppPluginDescriptor.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101qt_gui_cpp_PluginDescriptor(void *, PyObject *);}
static PyObject *convertFrom_QList_0101qt_gui_cpp_PluginDescriptor(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::qt_gui_cpp::PluginDescriptor*> *sipCpp = reinterpret_cast<QList< ::qt_gui_cpp::PluginDescriptor*> *>(sipCppV);

#line 153 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            qt_gui_cpp::PluginDescriptor *t = sipCpp->at(i);

            // The explicit (void *) cast allows qt_gui_cpp::PluginDescriptor to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_qt_gui_cpp_PluginDescriptor,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 162 "/opt/workspace/build/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipQList0101qt_gui_cppPluginDescriptor.cpp"
}


sipMappedTypeDef sipTypeDef_libqt_gui_cpp_sip_QList_0101qt_gui_cpp_PluginDescriptor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_108,     /* QList<qt_gui_cpp::PluginDescriptor*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101qt_gui_cpp_PluginDescriptor,
    array_QList_0101qt_gui_cpp_PluginDescriptor,
    copy_QList_0101qt_gui_cpp_PluginDescriptor,
    release_QList_0101qt_gui_cpp_PluginDescriptor,
    convertTo_QList_0101qt_gui_cpp_PluginDescriptor,
    convertFrom_QList_0101qt_gui_cpp_PluginDescriptor
};
